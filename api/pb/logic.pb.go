// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: logic.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProofClaimType 凭证类型
type ProofClaimType int32

const (
	ProofClaimType_Unknown            ProofClaimType = 0
	ProofClaimType_Education          ProofClaimType = 1 // 学历
	ProofClaimType_Degree             ProofClaimType = 2 // 学位
	ProofClaimType_EducationAndDegree ProofClaimType = 3 // 学历与学位
	ProofClaimType_LeaveOffice        ProofClaimType = 4 // 离职
	ProofClaimType_InOffice           ProofClaimType = 5 // 在职
)

// Enum value maps for ProofClaimType.
var (
	ProofClaimType_name = map[int32]string{
		0: "Unknown",
		1: "Education",
		2: "Degree",
		3: "EducationAndDegree",
		4: "LeaveOffice",
		5: "InOffice",
	}
	ProofClaimType_value = map[string]int32{
		"Unknown":            0,
		"Education":          1,
		"Degree":             2,
		"EducationAndDegree": 3,
		"LeaveOffice":        4,
		"InOffice":           5,
	}
)

func (x ProofClaimType) Enum() *ProofClaimType {
	p := new(ProofClaimType)
	*p = x
	return p
}

func (x ProofClaimType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofClaimType) Descriptor() protoreflect.EnumDescriptor {
	return file_logic_proto_enumTypes[0].Descriptor()
}

func (ProofClaimType) Type() protoreflect.EnumType {
	return &file_logic_proto_enumTypes[0]
}

func (x ProofClaimType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofClaimType.Descriptor instead.
func (ProofClaimType) EnumDescriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{0}
}

type ApplyKYCReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name   string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IdCard string   `protobuf:"bytes,3,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	Cids   []string `protobuf:"bytes,4,rep,name=cids,proto3" json:"cids,omitempty"`
}

func (x *ApplyKYCReq) Reset() {
	*x = ApplyKYCReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyKYCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyKYCReq) ProtoMessage() {}

func (x *ApplyKYCReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyKYCReq.ProtoReflect.Descriptor instead.
func (*ApplyKYCReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyKYCReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplyKYCReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplyKYCReq) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *ApplyKYCReq) GetCids() []string {
	if x != nil {
		return x.Cids
	}
	return nil
}

type IssueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer           string         `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Website          string         `protobuf:"bytes,2,opt,name=website,proto3" json:"website,omitempty"`
	Endpoint         string         `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ShortDescription string         `protobuf:"bytes,4,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	LongDescription  string         `protobuf:"bytes,5,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	Type             ProofClaimType `protobuf:"varint,6,opt,name=type,proto3,enum=ProofClaimType" json:"type,omitempty"`
}

func (x *IssueReq) Reset() {
	*x = IssueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueReq) ProtoMessage() {}

func (x *IssueReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueReq.ProtoReflect.Descriptor instead.
func (*IssueReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{1}
}

func (x *IssueReq) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *IssueReq) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *IssueReq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *IssueReq) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *IssueReq) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *IssueReq) GetType() ProofClaimType {
	if x != nil {
		return x.Type
	}
	return ProofClaimType_Unknown
}

type GetIssuedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32                    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Issuers []*GetIssuedReply_Issuer `protobuf:"bytes,2,rep,name=issuers,proto3" json:"issuers,omitempty"`
}

func (x *GetIssuedReply) Reset() {
	*x = GetIssuedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuedReply) ProtoMessage() {}

func (x *GetIssuedReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuedReply.ProtoReflect.Descriptor instead.
func (*GetIssuedReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{2}
}

func (x *GetIssuedReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetIssuedReply) GetIssuers() []*GetIssuedReply_Issuer {
	if x != nil {
		return x.Issuers
	}
	return nil
}

type RevokeIssuedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RevokeIssuedReq) Reset() {
	*x = RevokeIssuedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeIssuedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeIssuedReq) ProtoMessage() {}

func (x *RevokeIssuedReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeIssuedReq.ProtoReflect.Descriptor instead.
func (*RevokeIssuedReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{3}
}

func (x *RevokeIssuedReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetIssuerListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuers []*GetIssuerListReply_Issuer `protobuf:"bytes,1,rep,name=issuers,proto3" json:"issuers,omitempty"`
}

func (x *GetIssuerListReply) Reset() {
	*x = GetIssuerListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuerListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuerListReply) ProtoMessage() {}

func (x *GetIssuerListReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuerListReply.ProtoReflect.Descriptor instead.
func (*GetIssuerListReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{4}
}

func (x *GetIssuerListReply) GetIssuers() []*GetIssuerListReply_Issuer {
	if x != nil {
		return x.Issuers
	}
	return nil
}

type ChallengeSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderDid       string `protobuf:"bytes,1,opt,name=sender_did,json=senderDid,proto3" json:"sender_did,omitempty"`                   // 发送者的did
	RecipientDid    string `protobuf:"bytes,2,opt,name=recipient_did,json=recipientDid,proto3" json:"recipient_did,omitempty"`          // 接收者的did
	RecipientPubkey string `protobuf:"bytes,3,opt,name=recipient_pubkey,json=recipientPubkey,proto3" json:"recipient_pubkey,omitempty"` // 接收者的公钥
	Ciphertext      string `protobuf:"bytes,4,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`                                  // 密文
	Plaintext       string `protobuf:"bytes,5,opt,name=plaintext,proto3" json:"plaintext,omitempty"`                                    // 明文
}

func (x *ChallengeSendReq) Reset() {
	*x = ChallengeSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSendReq) ProtoMessage() {}

func (x *ChallengeSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSendReq.ProtoReflect.Descriptor instead.
func (*ChallengeSendReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{5}
}

func (x *ChallengeSendReq) GetSenderDid() string {
	if x != nil {
		return x.SenderDid
	}
	return ""
}

func (x *ChallengeSendReq) GetRecipientDid() string {
	if x != nil {
		return x.RecipientDid
	}
	return ""
}

func (x *ChallengeSendReq) GetRecipientPubkey() string {
	if x != nil {
		return x.RecipientPubkey
	}
	return ""
}

func (x *ChallengeSendReq) GetCiphertext() string {
	if x != nil {
		return x.Ciphertext
	}
	return ""
}

func (x *ChallengeSendReq) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

type ChallengeReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Plaintext string `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"` // 明文
}

func (x *ChallengeReplyReq) Reset() {
	*x = ChallengeReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeReplyReq) ProtoMessage() {}

func (x *ChallengeReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeReplyReq.ProtoReflect.Descriptor instead.
func (*ChallengeReplyReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{6}
}

func (x *ChallengeReplyReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChallengeReplyReq) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

type ChallengeSentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*ChallengeSentReply_Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *ChallengeSentReply) Reset() {
	*x = ChallengeSentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSentReply) ProtoMessage() {}

func (x *ChallengeSentReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSentReply.ProtoReflect.Descriptor instead.
func (*ChallengeSentReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{7}
}

func (x *ChallengeSentReply) GetChallenges() []*ChallengeSentReply_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type ChallengeDoingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*ChallengeDoingReply_Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *ChallengeDoingReply) Reset() {
	*x = ChallengeDoingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDoingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDoingReply) ProtoMessage() {}

func (x *ChallengeDoingReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDoingReply.ProtoReflect.Descriptor instead.
func (*ChallengeDoingReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{8}
}

func (x *ChallengeDoingReply) GetChallenges() []*ChallengeDoingReply_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type ChallengeDoneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*ChallengeDoneReply_Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *ChallengeDoneReply) Reset() {
	*x = ChallengeDoneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDoneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDoneReply) ProtoMessage() {}

func (x *ChallengeDoneReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDoneReply.ProtoReflect.Descriptor instead.
func (*ChallengeDoneReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{9}
}

func (x *ChallengeDoneReply) GetChallenges() []*ChallengeDoneReply_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type DoingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// applyId 申请提交后产生的唯一id
	ApplyId uint64 `protobuf:"varint,1,opt,name=applyId,proto3" json:"applyId,omitempty"`
	// 用户DID，proof claim 颁发的目标
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// 颁发者的DID
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// 申请的凭证类型
	Type ProofClaimType `protobuf:"varint,4,opt,name=type,proto3,enum=ProofClaimType" json:"type,omitempty"`
	// 申请原由,解释下为什么申请
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// 申请文档，可能是图片或协议
	Cids []string `protobuf:"bytes,6,rep,name=cids,proto3" json:"cids,omitempty"`
	// 申请时间
	Time string `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DoingItem) Reset() {
	*x = DoingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoingItem) ProtoMessage() {}

func (x *DoingItem) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoingItem.ProtoReflect.Descriptor instead.
func (*DoingItem) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{10}
}

func (x *DoingItem) GetApplyId() uint64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *DoingItem) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *DoingItem) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *DoingItem) GetType() ProofClaimType {
	if x != nil {
		return x.Type
	}
	return ProofClaimType_Unknown
}

func (x *DoingItem) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DoingItem) GetCids() []string {
	if x != nil {
		return x.Cids
	}
	return nil
}

func (x *DoingItem) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type FailedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// applyId 申请提交后产生的唯一id
	ApplyId uint64 `protobuf:"varint,1,opt,name=applyId,proto3" json:"applyId,omitempty"`
	// 用户DID，proof claim 颁发的目标
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// 颁发者的DID
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// 申请的凭证类型
	Type ProofClaimType `protobuf:"varint,4,opt,name=type,proto3,enum=ProofClaimType" json:"type,omitempty"`
	// 申请原由,解释下为什么申请
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// 申请文档，可能是图片或协议
	Cids []string `protobuf:"bytes,6,rep,name=cids,proto3" json:"cids,omitempty"`
	// 申请时间
	Time string `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	// 拒绝原因
	Why string `protobuf:"bytes,8,opt,name=why,proto3" json:"why,omitempty"`
}

func (x *FailedItem) Reset() {
	*x = FailedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedItem) ProtoMessage() {}

func (x *FailedItem) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedItem.ProtoReflect.Descriptor instead.
func (*FailedItem) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{11}
}

func (x *FailedItem) GetApplyId() uint64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *FailedItem) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *FailedItem) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *FailedItem) GetType() ProofClaimType {
	if x != nil {
		return x.Type
	}
	return ProofClaimType_Unknown
}

func (x *FailedItem) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FailedItem) GetCids() []string {
	if x != nil {
		return x.Cids
	}
	return nil
}

func (x *FailedItem) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *FailedItem) GetWhy() string {
	if x != nil {
		return x.Why
	}
	return ""
}

type DoneItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// applyId 申请提交后产生的唯一id
	ApplyId uint64 `protobuf:"varint,1,opt,name=applyId,proto3" json:"applyId,omitempty"`
	// 用户DID，proof claim 颁发的目标
	Did string `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	// 颁发者的DID
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// 申请的凭证类型
	Type ProofClaimType `protobuf:"varint,4,opt,name=type,proto3,enum=ProofClaimType" json:"type,omitempty"`
	// 申请原由,解释下为什么申请
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// 申请文档，可能是图片或协议
	Cids []string `protobuf:"bytes,6,rep,name=cids,proto3" json:"cids,omitempty"`
	// 申请时间
	Time string `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	// proof claim
	ProofClaim *ProofClaim `protobuf:"bytes,8,opt,name=proofClaim,proto3" json:"proofClaim,omitempty"`
	// 交易信息
	Transaction string `protobuf:"bytes,9,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// 收据信息
	Receipt string `protobuf:"bytes,10,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// 证书pdf
	PdfCid string `protobuf:"bytes,11,opt,name=pdf_cid,json=pdfCid,proto3" json:"pdf_cid,omitempty"`
}

func (x *DoneItem) Reset() {
	*x = DoneItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoneItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoneItem) ProtoMessage() {}

func (x *DoneItem) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoneItem.ProtoReflect.Descriptor instead.
func (*DoneItem) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{12}
}

func (x *DoneItem) GetApplyId() uint64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *DoneItem) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *DoneItem) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *DoneItem) GetType() ProofClaimType {
	if x != nil {
		return x.Type
	}
	return ProofClaimType_Unknown
}

func (x *DoneItem) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DoneItem) GetCids() []string {
	if x != nil {
		return x.Cids
	}
	return nil
}

func (x *DoneItem) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DoneItem) GetProofClaim() *ProofClaim {
	if x != nil {
		return x.ProofClaim
	}
	return nil
}

func (x *DoneItem) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *DoneItem) GetReceipt() string {
	if x != nil {
		return x.Receipt
	}
	return ""
}

func (x *DoneItem) GetPdfCid() string {
	if x != nil {
		return x.PdfCid
	}
	return ""
}

type ProofClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context           []string                      `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty"` //[json_name = "@context"];
	Id                string                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type              string                        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Issuer            string                        `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	IssuanceData      string                        `protobuf:"bytes,5,opt,name=issuance_data,json=issuanceData,proto3" json:"issuance_data,omitempty"`
	ExpirationData    string                        `protobuf:"bytes,6,opt,name=expiration_data,json=expirationData,proto3" json:"expiration_data,omitempty"`
	CredentialSubject *ProofClaim_CredentialSubject `protobuf:"bytes,7,opt,name=credential_subject,json=credentialSubject,proto3" json:"credential_subject,omitempty"`
	Proof             *ProofClaim_Proof             `protobuf:"bytes,8,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *ProofClaim) Reset() {
	*x = ProofClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofClaim) ProtoMessage() {}

func (x *ProofClaim) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofClaim.ProtoReflect.Descriptor instead.
func (*ProofClaim) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{13}
}

func (x *ProofClaim) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ProofClaim) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProofClaim) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProofClaim) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ProofClaim) GetIssuanceData() string {
	if x != nil {
		return x.IssuanceData
	}
	return ""
}

func (x *ProofClaim) GetExpirationData() string {
	if x != nil {
		return x.ExpirationData
	}
	return ""
}

func (x *ProofClaim) GetCredentialSubject() *ProofClaim_CredentialSubject {
	if x != nil {
		return x.CredentialSubject
	}
	return nil
}

func (x *ProofClaim) GetProof() *ProofClaim_Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

// ApplyReq 申请凭证请求
type ApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户DID，proof claim 颁发的目标
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// 颁发者的DID
	Issuer string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// 申请的凭证类型
	Type ProofClaimType `protobuf:"varint,3,opt,name=type,proto3,enum=ProofClaimType" json:"type,omitempty"`
	// 申请原由,解释下为什么申请
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// 申请文档，可能是图片或协议
	Cids []string `protobuf:"bytes,5,rep,name=cids,proto3" json:"cids,omitempty"`
}

func (x *ApplyReq) Reset() {
	*x = ApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyReq) ProtoMessage() {}

func (x *ApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyReq.ProtoReflect.Descriptor instead.
func (*ApplyReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{14}
}

func (x *ApplyReq) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *ApplyReq) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *ApplyReq) GetType() ProofClaimType {
	if x != nil {
		return x.Type
	}
	return ProofClaimType_Unknown
}

func (x *ApplyReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ApplyReq) GetCids() []string {
	if x != nil {
		return x.Cids
	}
	return nil
}

type ApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplyReply) Reset() {
	*x = ApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyReply) ProtoMessage() {}

func (x *ApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyReply.ProtoReflect.Descriptor instead.
func (*ApplyReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{15}
}

type ApplyDoingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DoingItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplyDoingReply) Reset() {
	*x = ApplyDoingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDoingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDoingReply) ProtoMessage() {}

func (x *ApplyDoingReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDoingReply.ProtoReflect.Descriptor instead.
func (*ApplyDoingReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{16}
}

func (x *ApplyDoingReply) GetData() []*DoingItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplyDoneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DoneItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplyDoneReply) Reset() {
	*x = ApplyDoneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyDoneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyDoneReply) ProtoMessage() {}

func (x *ApplyDoneReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyDoneReply.ProtoReflect.Descriptor instead.
func (*ApplyDoneReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{17}
}

func (x *ApplyDoneReply) GetData() []*DoneItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplyFailedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FailedItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApplyFailedReply) Reset() {
	*x = ApplyFailedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyFailedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFailedReply) ProtoMessage() {}

func (x *ApplyFailedReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFailedReply.ProtoReflect.Descriptor instead.
func (*ApplyFailedReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{18}
}

func (x *ApplyFailedReply) GetData() []*FailedItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplyCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 1: doing, 2: failed, 3: done
}

func (x *ApplyCountReq) Reset() {
	*x = ApplyCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCountReq) ProtoMessage() {}

func (x *ApplyCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCountReq.ProtoReflect.Descriptor instead.
func (*ApplyCountReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{19}
}

func (x *ApplyCountReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ApplyCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ApplyCountReply) Reset() {
	*x = ApplyCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyCountReply) ProtoMessage() {}

func (x *ApplyCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyCountReply.ProtoReflect.Descriptor instead.
func (*ApplyCountReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{20}
}

func (x *ApplyCountReply) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AuditCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 1: doing, 2: failed, 3: done
}

func (x *AuditCountReq) Reset() {
	*x = AuditCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditCountReq) ProtoMessage() {}

func (x *AuditCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditCountReq.ProtoReflect.Descriptor instead.
func (*AuditCountReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{21}
}

func (x *AuditCountReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AuditCountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AuditCountReply) Reset() {
	*x = AuditCountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditCountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditCountReply) ProtoMessage() {}

func (x *AuditCountReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditCountReply.ProtoReflect.Descriptor instead.
func (*AuditCountReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{22}
}

func (x *AuditCountReply) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AuditDoingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DoingItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AuditDoingReply) Reset() {
	*x = AuditDoingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditDoingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditDoingReply) ProtoMessage() {}

func (x *AuditDoingReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditDoingReply.ProtoReflect.Descriptor instead.
func (*AuditDoingReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{23}
}

func (x *AuditDoingReply) GetData() []*DoingItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId uint32 `protobuf:"varint,1,opt,name=applyId,proto3" json:"applyId,omitempty"`
	Result  int32  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 若为0，表示申请成功；若为1，表示审核失败
	// 审核失败
	Why string `protobuf:"bytes,3,opt,name=why,proto3" json:"why,omitempty"` // 审核失败附加的拒绝原因
	// 审核成功
	ShortDesc  string `protobuf:"bytes,4,opt,name=short_desc,json=shortDesc,proto3" json:"short_desc,omitempty"` // 审核成功的短描述
	LongDesc   string `protobuf:"bytes,5,opt,name=long_desc,json=longDesc,proto3" json:"long_desc,omitempty"`    // 审核成功的长描述
	Expiration string `protobuf:"bytes,6,opt,name=expiration,proto3" json:"expiration,omitempty"`                // 审核成功，凭证的过期时间
}

func (x *AuditReq) Reset() {
	*x = AuditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditReq) ProtoMessage() {}

func (x *AuditReq) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditReq.ProtoReflect.Descriptor instead.
func (*AuditReq) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{24}
}

func (x *AuditReq) GetApplyId() uint32 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *AuditReq) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *AuditReq) GetWhy() string {
	if x != nil {
		return x.Why
	}
	return ""
}

func (x *AuditReq) GetShortDesc() string {
	if x != nil {
		return x.ShortDesc
	}
	return ""
}

func (x *AuditReq) GetLongDesc() string {
	if x != nil {
		return x.LongDesc
	}
	return ""
}

func (x *AuditReq) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

type AuditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditReply) Reset() {
	*x = AuditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditReply) ProtoMessage() {}

func (x *AuditReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditReply.ProtoReflect.Descriptor instead.
func (*AuditReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{25}
}

type AuditFailedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FailedItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AuditFailedReply) Reset() {
	*x = AuditFailedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditFailedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditFailedReply) ProtoMessage() {}

func (x *AuditFailedReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditFailedReply.ProtoReflect.Descriptor instead.
func (*AuditFailedReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{26}
}

func (x *AuditFailedReply) GetData() []*FailedItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuditDoneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DoneItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AuditDoneReply) Reset() {
	*x = AuditDoneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditDoneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditDoneReply) ProtoMessage() {}

func (x *AuditDoneReply) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditDoneReply.ProtoReflect.Descriptor instead.
func (*AuditDoneReply) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{27}
}

func (x *AuditDoneReply) GetData() []*DoneItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetIssuedReply_Issuer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Did              string         `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Website          string         `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	Endpoint         string         `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ShortDescription string         `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	LongDescription  string         `protobuf:"bytes,6,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	Type             ProofClaimType `protobuf:"varint,7,opt,name=type,proto3,enum=ProofClaimType" json:"type,omitempty"`
	CreateTime       string         `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"` // 发布时间
}

func (x *GetIssuedReply_Issuer) Reset() {
	*x = GetIssuedReply_Issuer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuedReply_Issuer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuedReply_Issuer) ProtoMessage() {}

func (x *GetIssuedReply_Issuer) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuedReply_Issuer.ProtoReflect.Descriptor instead.
func (*GetIssuedReply_Issuer) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetIssuedReply_Issuer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetIssuedReply_Issuer) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *GetIssuedReply_Issuer) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *GetIssuedReply_Issuer) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *GetIssuedReply_Issuer) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *GetIssuedReply_Issuer) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *GetIssuedReply_Issuer) GetType() ProofClaimType {
	if x != nil {
		return x.Type
	}
	return ProofClaimType_Unknown
}

func (x *GetIssuedReply_Issuer) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type GetIssuerListReply_Issuer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Did              string         `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Website          string         `protobuf:"bytes,2,opt,name=website,proto3" json:"website,omitempty"`
	Endpoint         string         `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ShortDescription string         `protobuf:"bytes,4,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	LongDescription  string         `protobuf:"bytes,5,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	Type             ProofClaimType `protobuf:"varint,6,opt,name=type,proto3,enum=ProofClaimType" json:"type,omitempty"`
	CreateTime       string         `protobuf:"bytes,7,opt,name=createTime,proto3" json:"createTime,omitempty"` // 发布时间
}

func (x *GetIssuerListReply_Issuer) Reset() {
	*x = GetIssuerListReply_Issuer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssuerListReply_Issuer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssuerListReply_Issuer) ProtoMessage() {}

func (x *GetIssuerListReply_Issuer) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssuerListReply_Issuer.ProtoReflect.Descriptor instead.
func (*GetIssuerListReply_Issuer) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetIssuerListReply_Issuer) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *GetIssuerListReply_Issuer) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *GetIssuerListReply_Issuer) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *GetIssuerListReply_Issuer) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *GetIssuerListReply_Issuer) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *GetIssuerListReply_Issuer) GetType() ProofClaimType {
	if x != nil {
		return x.Type
	}
	return ProofClaimType_Unknown
}

func (x *GetIssuerListReply_Issuer) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type ChallengeSentReply_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 挑战的唯一标识符
	SenderDid       string `protobuf:"bytes,2,opt,name=senderDid,proto3" json:"senderDid,omitempty"`
	RecipientDid    string `protobuf:"bytes,3,opt,name=recipientDid,proto3" json:"recipientDid,omitempty"`
	RecipientPubKey string `protobuf:"bytes,4,opt,name=recipientPubKey,proto3" json:"recipientPubKey,omitempty"`
	Plaintext       string `protobuf:"bytes,5,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	CreatedTime     string `protobuf:"bytes,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	Status          string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"` // 0:待验证；1：验证失败；2：验证成功
}

func (x *ChallengeSentReply_Challenge) Reset() {
	*x = ChallengeSentReply_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSentReply_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSentReply_Challenge) ProtoMessage() {}

func (x *ChallengeSentReply_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSentReply_Challenge.ProtoReflect.Descriptor instead.
func (*ChallengeSentReply_Challenge) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ChallengeSentReply_Challenge) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChallengeSentReply_Challenge) GetSenderDid() string {
	if x != nil {
		return x.SenderDid
	}
	return ""
}

func (x *ChallengeSentReply_Challenge) GetRecipientDid() string {
	if x != nil {
		return x.RecipientDid
	}
	return ""
}

func (x *ChallengeSentReply_Challenge) GetRecipientPubKey() string {
	if x != nil {
		return x.RecipientPubKey
	}
	return ""
}

func (x *ChallengeSentReply_Challenge) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

func (x *ChallengeSentReply_Challenge) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *ChallengeSentReply_Challenge) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ChallengeDoingReply_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderDid   string `protobuf:"bytes,2,opt,name=senderDid,proto3" json:"senderDid,omitempty"`
	CreatedTime string `protobuf:"bytes,3,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	Ciphertext  string `protobuf:"bytes,4,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *ChallengeDoingReply_Challenge) Reset() {
	*x = ChallengeDoingReply_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDoingReply_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDoingReply_Challenge) ProtoMessage() {}

func (x *ChallengeDoingReply_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDoingReply_Challenge.ProtoReflect.Descriptor instead.
func (*ChallengeDoingReply_Challenge) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ChallengeDoingReply_Challenge) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChallengeDoingReply_Challenge) GetSenderDid() string {
	if x != nil {
		return x.SenderDid
	}
	return ""
}

func (x *ChallengeDoingReply_Challenge) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *ChallengeDoingReply_Challenge) GetCiphertext() string {
	if x != nil {
		return x.Ciphertext
	}
	return ""
}

type ChallengeDoneReply_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderDid   string `protobuf:"bytes,2,opt,name=senderDid,proto3" json:"senderDid,omitempty"`
	ReceiptDid  string `protobuf:"bytes,3,opt,name=receiptDid,proto3" json:"receiptDid,omitempty"`
	CreatedTime string `protobuf:"bytes,4,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	Ciphertext  string `protobuf:"bytes,5,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Status      int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChallengeDoneReply_Challenge) Reset() {
	*x = ChallengeDoneReply_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDoneReply_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDoneReply_Challenge) ProtoMessage() {}

func (x *ChallengeDoneReply_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDoneReply_Challenge.ProtoReflect.Descriptor instead.
func (*ChallengeDoneReply_Challenge) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ChallengeDoneReply_Challenge) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChallengeDoneReply_Challenge) GetSenderDid() string {
	if x != nil {
		return x.SenderDid
	}
	return ""
}

func (x *ChallengeDoneReply_Challenge) GetReceiptDid() string {
	if x != nil {
		return x.ReceiptDid
	}
	return ""
}

func (x *ChallengeDoneReply_Challenge) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *ChallengeDoneReply_Challenge) GetCiphertext() string {
	if x != nil {
		return x.Ciphertext
	}
	return ""
}

func (x *ChallengeDoneReply_Challenge) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ProofClaim_CredentialSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortDescription string `protobuf:"bytes,2,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	LongDescription  string `protobuf:"bytes,3,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	Type             string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ProofClaim_CredentialSubject) Reset() {
	*x = ProofClaim_CredentialSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofClaim_CredentialSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofClaim_CredentialSubject) ProtoMessage() {}

func (x *ProofClaim_CredentialSubject) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofClaim_CredentialSubject.ProtoReflect.Descriptor instead.
func (*ProofClaim_CredentialSubject) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ProofClaim_CredentialSubject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProofClaim_CredentialSubject) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *ProofClaim_CredentialSubject) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *ProofClaim_CredentialSubject) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ProofClaim_Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ProofClaim_Proof) Reset() {
	*x = ProofClaim_Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logic_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofClaim_Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofClaim_Proof) ProtoMessage() {}

func (x *ProofClaim_Proof) ProtoReflect() protoreflect.Message {
	mi := &file_logic_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofClaim_Proof.ProtoReflect.Descriptor instead.
func (*ProofClaim_Proof) Descriptor() ([]byte, []int) {
	return file_logic_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ProofClaim_Proof) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProofClaim_Proof) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ProofClaim_Proof) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_logic_proto protoreflect.FileDescriptor

var file_logic_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x4b, 0x59, 0x43, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73, 0x22, 0xd5, 0x01, 0x0a,
	0x08, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x1a,
	0xfd, 0x01, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x21, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x1a,
	0xed, 0x01, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x41, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x44, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd2, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x1a, 0x7b, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x89, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x44, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb4, 0x01,
	0x0a, 0x09, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x77, 0x68, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x68, 0x79, 0x22, 0xb5,
	0x02, 0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x64, 0x66, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x64, 0x66, 0x43, 0x69, 0x64, 0x22, 0x8e, 0x04, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x1a, 0x8f, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x53, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73, 0x22,
	0x0c, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x31, 0x0a,
	0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x2f, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x33, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x31, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x6f, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x77, 0x68, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x0c, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x33, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x6f, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x10, 0x05, 0x32, 0xc8, 0x0d, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x12, 0x50, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4b, 0x59, 0x43, 0x12, 0x0c, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x4b, 0x59, 0x43, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x6b, 0x79, 0x63,
	0x3a, 0x01, 0x2a, 0x12, 0x46, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x09, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x12, 0x10, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5a,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x3a, 0x01, 0x2a, 0x12,
	0x5e, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x61, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x64, 0x6f, 0x69,
	0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x64, 0x6f,
	0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x09, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x3a, 0x01, 0x2a, 0x12,
	0x55, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2f, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0x3b, 0x0a, 0x05, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x09, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12,
	0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0x55, 0x0a,
	0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x6f, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x64,
	0x6f, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x52,
	0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x64, 0x6f,
	0x6e, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_logic_proto_rawDescOnce sync.Once
	file_logic_proto_rawDescData = file_logic_proto_rawDesc
)

func file_logic_proto_rawDescGZIP() []byte {
	file_logic_proto_rawDescOnce.Do(func() {
		file_logic_proto_rawDescData = protoimpl.X.CompressGZIP(file_logic_proto_rawDescData)
	})
	return file_logic_proto_rawDescData
}

var file_logic_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_logic_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_logic_proto_goTypes = []interface{}{
	(ProofClaimType)(0),                   // 0: ProofClaimType
	(*ApplyKYCReq)(nil),                   // 1: ApplyKYCReq
	(*IssueReq)(nil),                      // 2: IssueReq
	(*GetIssuedReply)(nil),                // 3: GetIssuedReply
	(*RevokeIssuedReq)(nil),               // 4: RevokeIssuedReq
	(*GetIssuerListReply)(nil),            // 5: GetIssuerListReply
	(*ChallengeSendReq)(nil),              // 6: ChallengeSendReq
	(*ChallengeReplyReq)(nil),             // 7: ChallengeReplyReq
	(*ChallengeSentReply)(nil),            // 8: ChallengeSentReply
	(*ChallengeDoingReply)(nil),           // 9: ChallengeDoingReply
	(*ChallengeDoneReply)(nil),            // 10: ChallengeDoneReply
	(*DoingItem)(nil),                     // 11: DoingItem
	(*FailedItem)(nil),                    // 12: FailedItem
	(*DoneItem)(nil),                      // 13: DoneItem
	(*ProofClaim)(nil),                    // 14: ProofClaim
	(*ApplyReq)(nil),                      // 15: ApplyReq
	(*ApplyReply)(nil),                    // 16: ApplyReply
	(*ApplyDoingReply)(nil),               // 17: ApplyDoingReply
	(*ApplyDoneReply)(nil),                // 18: ApplyDoneReply
	(*ApplyFailedReply)(nil),              // 19: ApplyFailedReply
	(*ApplyCountReq)(nil),                 // 20: ApplyCountReq
	(*ApplyCountReply)(nil),               // 21: ApplyCountReply
	(*AuditCountReq)(nil),                 // 22: AuditCountReq
	(*AuditCountReply)(nil),               // 23: AuditCountReply
	(*AuditDoingReply)(nil),               // 24: AuditDoingReply
	(*AuditReq)(nil),                      // 25: AuditReq
	(*AuditReply)(nil),                    // 26: AuditReply
	(*AuditFailedReply)(nil),              // 27: AuditFailedReply
	(*AuditDoneReply)(nil),                // 28: AuditDoneReply
	(*GetIssuedReply_Issuer)(nil),         // 29: GetIssuedReply.Issuer
	(*GetIssuerListReply_Issuer)(nil),     // 30: GetIssuerListReply.Issuer
	(*ChallengeSentReply_Challenge)(nil),  // 31: ChallengeSentReply.Challenge
	(*ChallengeDoingReply_Challenge)(nil), // 32: ChallengeDoingReply.Challenge
	(*ChallengeDoneReply_Challenge)(nil),  // 33: ChallengeDoneReply.Challenge
	(*ProofClaim_CredentialSubject)(nil),  // 34: ProofClaim.CredentialSubject
	(*ProofClaim_Proof)(nil),              // 35: ProofClaim.Proof
	(*emptypb.Empty)(nil),                 // 36: google.protobuf.Empty
}
var file_logic_proto_depIdxs = []int32{
	0,  // 0: IssueReq.type:type_name -> ProofClaimType
	29, // 1: GetIssuedReply.issuers:type_name -> GetIssuedReply.Issuer
	30, // 2: GetIssuerListReply.issuers:type_name -> GetIssuerListReply.Issuer
	31, // 3: ChallengeSentReply.challenges:type_name -> ChallengeSentReply.Challenge
	32, // 4: ChallengeDoingReply.challenges:type_name -> ChallengeDoingReply.Challenge
	33, // 5: ChallengeDoneReply.challenges:type_name -> ChallengeDoneReply.Challenge
	0,  // 6: DoingItem.type:type_name -> ProofClaimType
	0,  // 7: FailedItem.type:type_name -> ProofClaimType
	0,  // 8: DoneItem.type:type_name -> ProofClaimType
	14, // 9: DoneItem.proofClaim:type_name -> ProofClaim
	34, // 10: ProofClaim.credential_subject:type_name -> ProofClaim.CredentialSubject
	35, // 11: ProofClaim.proof:type_name -> ProofClaim.Proof
	0,  // 12: ApplyReq.type:type_name -> ProofClaimType
	11, // 13: ApplyDoingReply.data:type_name -> DoingItem
	13, // 14: ApplyDoneReply.data:type_name -> DoneItem
	12, // 15: ApplyFailedReply.data:type_name -> FailedItem
	11, // 16: AuditDoingReply.data:type_name -> DoingItem
	12, // 17: AuditFailedReply.data:type_name -> FailedItem
	13, // 18: AuditDoneReply.data:type_name -> DoneItem
	0,  // 19: GetIssuedReply.Issuer.type:type_name -> ProofClaimType
	0,  // 20: GetIssuerListReply.Issuer.type:type_name -> ProofClaimType
	1,  // 21: Logic.ApplyKYC:input_type -> ApplyKYCReq
	2,  // 22: Logic.Issue:input_type -> IssueReq
	36, // 23: Logic.GetIssued:input_type -> google.protobuf.Empty
	4,  // 24: Logic.RevokeIssued:input_type -> RevokeIssuedReq
	36, // 25: Logic.GetIssuerList:input_type -> google.protobuf.Empty
	6,  // 26: Logic.ChallengeSend:input_type -> ChallengeSendReq
	7,  // 27: Logic.ChallengeReply:input_type -> ChallengeReplyReq
	36, // 28: Logic.ChallengeSent:input_type -> google.protobuf.Empty
	36, // 29: Logic.ChallengeDoing:input_type -> google.protobuf.Empty
	36, // 30: Logic.ChallengeDone:input_type -> google.protobuf.Empty
	15, // 31: Logic.Apply:input_type -> ApplyReq
	36, // 32: Logic.ApplyDoing:input_type -> google.protobuf.Empty
	36, // 33: Logic.ApplyDone:input_type -> google.protobuf.Empty
	36, // 34: Logic.ApplyFailed:input_type -> google.protobuf.Empty
	20, // 35: Logic.ApplyCount:input_type -> ApplyCountReq
	25, // 36: Logic.Audit:input_type -> AuditReq
	22, // 37: Logic.AuditCount:input_type -> AuditCountReq
	36, // 38: Logic.AuditDoing:input_type -> google.protobuf.Empty
	36, // 39: Logic.AuditFailed:input_type -> google.protobuf.Empty
	36, // 40: Logic.AuditDone:input_type -> google.protobuf.Empty
	36, // 41: Logic.ApplyKYC:output_type -> google.protobuf.Empty
	36, // 42: Logic.Issue:output_type -> google.protobuf.Empty
	3,  // 43: Logic.GetIssued:output_type -> GetIssuedReply
	36, // 44: Logic.RevokeIssued:output_type -> google.protobuf.Empty
	5,  // 45: Logic.GetIssuerList:output_type -> GetIssuerListReply
	36, // 46: Logic.ChallengeSend:output_type -> google.protobuf.Empty
	36, // 47: Logic.ChallengeReply:output_type -> google.protobuf.Empty
	8,  // 48: Logic.ChallengeSent:output_type -> ChallengeSentReply
	9,  // 49: Logic.ChallengeDoing:output_type -> ChallengeDoingReply
	10, // 50: Logic.ChallengeDone:output_type -> ChallengeDoneReply
	16, // 51: Logic.Apply:output_type -> ApplyReply
	17, // 52: Logic.ApplyDoing:output_type -> ApplyDoingReply
	18, // 53: Logic.ApplyDone:output_type -> ApplyDoneReply
	19, // 54: Logic.ApplyFailed:output_type -> ApplyFailedReply
	21, // 55: Logic.ApplyCount:output_type -> ApplyCountReply
	26, // 56: Logic.Audit:output_type -> AuditReply
	23, // 57: Logic.AuditCount:output_type -> AuditCountReply
	24, // 58: Logic.AuditDoing:output_type -> AuditDoingReply
	27, // 59: Logic.AuditFailed:output_type -> AuditFailedReply
	28, // 60: Logic.AuditDone:output_type -> AuditDoneReply
	41, // [41:61] is the sub-list for method output_type
	21, // [21:41] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_logic_proto_init() }
func file_logic_proto_init() {
	if File_logic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyKYCReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeIssuedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuerListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeSentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDoingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDoneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoneItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDoingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyDoneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyFailedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditCountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditDoingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditFailedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditDoneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuedReply_Issuer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssuerListReply_Issuer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeSentReply_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDoingReply_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDoneReply_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofClaim_CredentialSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logic_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofClaim_Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logic_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logic_proto_goTypes,
		DependencyIndexes: file_logic_proto_depIdxs,
		EnumInfos:         file_logic_proto_enumTypes,
		MessageInfos:      file_logic_proto_msgTypes,
	}.Build()
	File_logic_proto = out.File
	file_logic_proto_rawDesc = nil
	file_logic_proto_goTypes = nil
	file_logic_proto_depIdxs = nil
}
