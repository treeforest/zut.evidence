// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: wallet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	// GenerateKey 生成公私钥
	GenerateKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateKeyReply, error)
	// DownloadKey 下载公私钥（内部调用）
	DownloadKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DownloadKeyReply, error)
	// GetPrivateKey 获取私钥（内部服务使用，不对外暴露）
	GetPrivateKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrivateKeyReply, error)
	// GetPubKey 获取公钥
	GetPubKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPubKeyReply, error)
	// Sign 签名
	Sign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignReply, error)
	// Verify 验签
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyReply, error)
	// Encrypt 使用当前账号的公钥进行加密
	Encrypt(ctx context.Context, in *EncryptReq, opts ...grpc.CallOption) (*EncryptReply, error)
	// EncryptByPubKey 使用指定的公钥进行加密
	EncryptByPubKey(ctx context.Context, in *EncryptByPubKeyReq, opts ...grpc.CallOption) (*EncryptByPubKeyReply, error)
	// Decrypt 使用当前账号的私钥进行解密
	Decrypt(ctx context.Context, in *DecryptReq, opts ...grpc.CallOption) (*DecryptReply, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GenerateKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateKeyReply, error) {
	out := new(GenerateKeyReply)
	err := c.cc.Invoke(ctx, "/Wallet/GenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DownloadKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DownloadKeyReply, error) {
	out := new(DownloadKeyReply)
	err := c.cc.Invoke(ctx, "/Wallet/DownloadKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPrivateKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrivateKeyReply, error) {
	out := new(GetPrivateKeyReply)
	err := c.cc.Invoke(ctx, "/Wallet/GetPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPubKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPubKeyReply, error) {
	out := new(GetPubKeyReply)
	err := c.cc.Invoke(ctx, "/Wallet/GetPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Sign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignReply, error) {
	out := new(SignReply)
	err := c.cc.Invoke(ctx, "/Wallet/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyReply, error) {
	out := new(VerifyReply)
	err := c.cc.Invoke(ctx, "/Wallet/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Encrypt(ctx context.Context, in *EncryptReq, opts ...grpc.CallOption) (*EncryptReply, error) {
	out := new(EncryptReply)
	err := c.cc.Invoke(ctx, "/Wallet/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EncryptByPubKey(ctx context.Context, in *EncryptByPubKeyReq, opts ...grpc.CallOption) (*EncryptByPubKeyReply, error) {
	out := new(EncryptByPubKeyReply)
	err := c.cc.Invoke(ctx, "/Wallet/EncryptByPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) Decrypt(ctx context.Context, in *DecryptReq, opts ...grpc.CallOption) (*DecryptReply, error) {
	out := new(DecryptReply)
	err := c.cc.Invoke(ctx, "/Wallet/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	// GenerateKey 生成公私钥
	GenerateKey(context.Context, *emptypb.Empty) (*GenerateKeyReply, error)
	// DownloadKey 下载公私钥（内部调用）
	DownloadKey(context.Context, *emptypb.Empty) (*DownloadKeyReply, error)
	// GetPrivateKey 获取私钥（内部服务使用，不对外暴露）
	GetPrivateKey(context.Context, *emptypb.Empty) (*GetPrivateKeyReply, error)
	// GetPubKey 获取公钥
	GetPubKey(context.Context, *emptypb.Empty) (*GetPubKeyReply, error)
	// Sign 签名
	Sign(context.Context, *SignReq) (*SignReply, error)
	// Verify 验签
	Verify(context.Context, *VerifyReq) (*VerifyReply, error)
	// Encrypt 使用当前账号的公钥进行加密
	Encrypt(context.Context, *EncryptReq) (*EncryptReply, error)
	// EncryptByPubKey 使用指定的公钥进行加密
	EncryptByPubKey(context.Context, *EncryptByPubKeyReq) (*EncryptByPubKeyReply, error)
	// Decrypt 使用当前账号的私钥进行解密
	Decrypt(context.Context, *DecryptReq) (*DecryptReply, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) GenerateKey(context.Context, *emptypb.Empty) (*GenerateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (UnimplementedWalletServer) DownloadKey(context.Context, *emptypb.Empty) (*DownloadKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadKey not implemented")
}
func (UnimplementedWalletServer) GetPrivateKey(context.Context, *emptypb.Empty) (*GetPrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateKey not implemented")
}
func (UnimplementedWalletServer) GetPubKey(context.Context, *emptypb.Empty) (*GetPubKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubKey not implemented")
}
func (UnimplementedWalletServer) Sign(context.Context, *SignReq) (*SignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedWalletServer) Verify(context.Context, *VerifyReq) (*VerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedWalletServer) Encrypt(context.Context, *EncryptReq) (*EncryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedWalletServer) EncryptByPubKey(context.Context, *EncryptByPubKeyReq) (*EncryptByPubKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptByPubKey not implemented")
}
func (UnimplementedWalletServer) Decrypt(context.Context, *DecryptReq) (*DecryptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/GenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GenerateKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DownloadKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DownloadKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/DownloadKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DownloadKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/GetPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPrivateKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/GetPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPubKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Sign(ctx, req.(*SignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Encrypt(ctx, req.(*EncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EncryptByPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptByPubKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EncryptByPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/EncryptByPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EncryptByPubKey(ctx, req.(*EncryptByPubKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).Decrypt(ctx, req.(*DecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _Wallet_GenerateKey_Handler,
		},
		{
			MethodName: "DownloadKey",
			Handler:    _Wallet_DownloadKey_Handler,
		},
		{
			MethodName: "GetPrivateKey",
			Handler:    _Wallet_GetPrivateKey_Handler,
		},
		{
			MethodName: "GetPubKey",
			Handler:    _Wallet_GetPubKey_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _Wallet_Sign_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Wallet_Verify_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _Wallet_Encrypt_Handler,
		},
		{
			MethodName: "EncryptByPubKey",
			Handler:    _Wallet_EncryptByPubKey_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _Wallet_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
