// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: did_resolver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DIDResolverClient is the client API for DIDResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DIDResolverClient interface {
	// CreateDID 创建DID
	CreateDID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateDIDReply, error)
	// RevokeDID 吊销DID
	RevokeDID(ctx context.Context, in *RevokeDIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetDIDs 获取当前账号的所有DID
	GetDIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDIDsReply, error)
	// GetDIDDocument 获取DID所对应 DID Document
	GetDIDDocument(ctx context.Context, in *GetDIDDocumentReq, opts ...grpc.CallOption) (*GetDIDDocumentRely, error)
	// GetPublicKeyByDID 获取DID中的公钥
	GetPublicKeyByDID(ctx context.Context, in *GetPublicKeyByDIDReq, opts ...grpc.CallOption) (*GetPublicKeyByDIDReply, error)
	// ExistDID 判断用户是否拥有对应的DID
	ExistDID(ctx context.Context, in *ExistDIDReq, opts ...grpc.CallOption) (*ExistDIDReply, error)
	// GetUidByDID 获取DID拥有者的uid
	GetOwnerByDID(ctx context.Context, in *GetOwnerByDIDReq, opts ...grpc.CallOption) (*GetOwnerByDIDReply, error)
}

type dIDResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewDIDResolverClient(cc grpc.ClientConnInterface) DIDResolverClient {
	return &dIDResolverClient{cc}
}

func (c *dIDResolverClient) CreateDID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateDIDReply, error) {
	out := new(CreateDIDReply)
	err := c.cc.Invoke(ctx, "/DIDResolver/CreateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDResolverClient) RevokeDID(ctx context.Context, in *RevokeDIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DIDResolver/RevokeDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDResolverClient) GetDIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDIDsReply, error) {
	out := new(GetDIDsReply)
	err := c.cc.Invoke(ctx, "/DIDResolver/GetDIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDResolverClient) GetDIDDocument(ctx context.Context, in *GetDIDDocumentReq, opts ...grpc.CallOption) (*GetDIDDocumentRely, error) {
	out := new(GetDIDDocumentRely)
	err := c.cc.Invoke(ctx, "/DIDResolver/GetDIDDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDResolverClient) GetPublicKeyByDID(ctx context.Context, in *GetPublicKeyByDIDReq, opts ...grpc.CallOption) (*GetPublicKeyByDIDReply, error) {
	out := new(GetPublicKeyByDIDReply)
	err := c.cc.Invoke(ctx, "/DIDResolver/GetPublicKeyByDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDResolverClient) ExistDID(ctx context.Context, in *ExistDIDReq, opts ...grpc.CallOption) (*ExistDIDReply, error) {
	out := new(ExistDIDReply)
	err := c.cc.Invoke(ctx, "/DIDResolver/ExistDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDResolverClient) GetOwnerByDID(ctx context.Context, in *GetOwnerByDIDReq, opts ...grpc.CallOption) (*GetOwnerByDIDReply, error) {
	out := new(GetOwnerByDIDReply)
	err := c.cc.Invoke(ctx, "/DIDResolver/GetOwnerByDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DIDResolverServer is the server API for DIDResolver service.
// All implementations must embed UnimplementedDIDResolverServer
// for forward compatibility
type DIDResolverServer interface {
	// CreateDID 创建DID
	CreateDID(context.Context, *emptypb.Empty) (*CreateDIDReply, error)
	// RevokeDID 吊销DID
	RevokeDID(context.Context, *RevokeDIDReq) (*emptypb.Empty, error)
	// GetDIDs 获取当前账号的所有DID
	GetDIDs(context.Context, *emptypb.Empty) (*GetDIDsReply, error)
	// GetDIDDocument 获取DID所对应 DID Document
	GetDIDDocument(context.Context, *GetDIDDocumentReq) (*GetDIDDocumentRely, error)
	// GetPublicKeyByDID 获取DID中的公钥
	GetPublicKeyByDID(context.Context, *GetPublicKeyByDIDReq) (*GetPublicKeyByDIDReply, error)
	// ExistDID 判断用户是否拥有对应的DID
	ExistDID(context.Context, *ExistDIDReq) (*ExistDIDReply, error)
	// GetUidByDID 获取DID拥有者的uid
	GetOwnerByDID(context.Context, *GetOwnerByDIDReq) (*GetOwnerByDIDReply, error)
	mustEmbedUnimplementedDIDResolverServer()
}

// UnimplementedDIDResolverServer must be embedded to have forward compatible implementations.
type UnimplementedDIDResolverServer struct {
}

func (UnimplementedDIDResolverServer) CreateDID(context.Context, *emptypb.Empty) (*CreateDIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDID not implemented")
}
func (UnimplementedDIDResolverServer) RevokeDID(context.Context, *RevokeDIDReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDID not implemented")
}
func (UnimplementedDIDResolverServer) GetDIDs(context.Context, *emptypb.Empty) (*GetDIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDIDs not implemented")
}
func (UnimplementedDIDResolverServer) GetDIDDocument(context.Context, *GetDIDDocumentReq) (*GetDIDDocumentRely, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDIDDocument not implemented")
}
func (UnimplementedDIDResolverServer) GetPublicKeyByDID(context.Context, *GetPublicKeyByDIDReq) (*GetPublicKeyByDIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKeyByDID not implemented")
}
func (UnimplementedDIDResolverServer) ExistDID(context.Context, *ExistDIDReq) (*ExistDIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDID not implemented")
}
func (UnimplementedDIDResolverServer) GetOwnerByDID(context.Context, *GetOwnerByDIDReq) (*GetOwnerByDIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerByDID not implemented")
}
func (UnimplementedDIDResolverServer) mustEmbedUnimplementedDIDResolverServer() {}

// UnsafeDIDResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DIDResolverServer will
// result in compilation errors.
type UnsafeDIDResolverServer interface {
	mustEmbedUnimplementedDIDResolverServer()
}

func RegisterDIDResolverServer(s grpc.ServiceRegistrar, srv DIDResolverServer) {
	s.RegisterService(&DIDResolver_ServiceDesc, srv)
}

func _DIDResolver_CreateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDResolverServer).CreateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIDResolver/CreateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDResolverServer).CreateDID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDResolver_RevokeDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDResolverServer).RevokeDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIDResolver/RevokeDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDResolverServer).RevokeDID(ctx, req.(*RevokeDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDResolver_GetDIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDResolverServer).GetDIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIDResolver/GetDIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDResolverServer).GetDIDs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDResolver_GetDIDDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDIDDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDResolverServer).GetDIDDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIDResolver/GetDIDDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDResolverServer).GetDIDDocument(ctx, req.(*GetDIDDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDResolver_GetPublicKeyByDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyByDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDResolverServer).GetPublicKeyByDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIDResolver/GetPublicKeyByDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDResolverServer).GetPublicKeyByDID(ctx, req.(*GetPublicKeyByDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDResolver_ExistDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDResolverServer).ExistDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIDResolver/ExistDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDResolverServer).ExistDID(ctx, req.(*ExistDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDResolver_GetOwnerByDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerByDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDResolverServer).GetOwnerByDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DIDResolver/GetOwnerByDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDResolverServer).GetOwnerByDID(ctx, req.(*GetOwnerByDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DIDResolver_ServiceDesc is the grpc.ServiceDesc for DIDResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DIDResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DIDResolver",
	HandlerType: (*DIDResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDID",
			Handler:    _DIDResolver_CreateDID_Handler,
		},
		{
			MethodName: "RevokeDID",
			Handler:    _DIDResolver_RevokeDID_Handler,
		},
		{
			MethodName: "GetDIDs",
			Handler:    _DIDResolver_GetDIDs_Handler,
		},
		{
			MethodName: "GetDIDDocument",
			Handler:    _DIDResolver_GetDIDDocument_Handler,
		},
		{
			MethodName: "GetPublicKeyByDID",
			Handler:    _DIDResolver_GetPublicKeyByDID_Handler,
		},
		{
			MethodName: "ExistDID",
			Handler:    _DIDResolver_ExistDID_Handler,
		},
		{
			MethodName: "GetOwnerByDID",
			Handler:    _DIDResolver_GetOwnerByDID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "did_resolver.proto",
}
