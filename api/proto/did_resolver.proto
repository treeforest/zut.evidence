syntax="proto3";

option go_package=".;pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service DIDResolver {
  // CreateDID 创建DID
  rpc CreateDID(google.protobuf.Empty) returns(CreateDIDReply) {
    option (google.api.http) = {
      post: "/v1/didresolver/createdid"
      body: "*"
    };
  }

  // RevokeDID 吊销DID
  rpc RevokeDID(RevokeDIDReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/didresolver/revokedid"
      body: "*"
    };
  }

  // GetDIDs 获取当前账号的所有DID
  rpc GetDIDs(google.protobuf.Empty) returns (GetDIDsReply) {
    option (google.api.http) = {
      get: "/v1/didresolver/getdids"
    };
  }

  // GetDIDDocument 获取DID所对应 DID Document
  rpc GetDIDDocument(GetDIDDocumentReq) returns (GetDIDDocumentRely) {
    option (google.api.http) = {
      get: "/v1/didresolver/getdiddocument/{did}"
    };
  }

  // GetPublicKeyByDID 获取DID中的公钥
  rpc GetPublicKeyByDID(GetPublicKeyByDIDReq) returns (GetPublicKeyByDIDReply){
    option (google.api.http) = {
      get: "/v1/didresolver/getpublickeybydid/{did}"
    };
  }

  // ExistDID 判断用户是否拥有对应的DID
  rpc ExistDID(ExistDIDReq) returns (ExistDIDReply);

  // GetUidByDID 获取DID拥有者的uid
  rpc GetOwnerByDID(GetOwnerByDIDReq) returns (GetOwnerByDIDReply);
}

message CreateDIDReply {
  string did = 1;
  string created = 2;
}

message RevokeDIDReq {
  string did = 1;
}

message GetDIDsReply {
  repeated GetDIDItem dids = 1;
}

message GetDIDItem {
  string did = 1;
  string created = 2;
}

message GetDIDDocumentReq {
  string did = 1;
}

message GetDIDDocumentRely {
  DIDDocument did_document = 1;
}

message DIDDocument {
  repeated string context = 1;// [json_name = "@context"];
  string id = 2;
  int32 version = 3;
  string created = 4;
  string updated = 5;

  message PublicKey {
    string id = 1;
    string type = 2;
    string public_key_hex = 3;
  }
  repeated PublicKey public_key = 6;

  repeated string authentication = 7;

  message Proof {
    string type = 1;
    string creator = 2;
    string signature = 3;
  }
  Proof proof = 8;
}

message GetPublicKeyByDIDReq {
  string did = 1;
}

message GetPublicKeyByDIDReply {
  string public_key = 1;
}

message ExistDIDReq {
  int64 uid = 1;
  string did = 2;
}

message ExistDIDReply {
  bool exists = 1;
}

message GetOwnerByDIDReq {
  string did = 1;
}

message GetOwnerByDIDReply {
  int64 uid = 1;
}